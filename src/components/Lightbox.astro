---
// 燈箱組件不需要 props，它會動態顯示點擊的圖片
---

<div id="lightbox" class="lightbox fixed inset-0 z-[2000] hidden" role="dialog" aria-label="圖片預覽" aria-modal="true">
  <!-- 背景遮罩 -->
  <div class="lightbox-overlay absolute inset-0 bg-black/90 backdrop-blur-sm"></div>
  
  <!-- 控制按鈕區 -->
  <div class="absolute top-4 right-4 z-10 flex gap-2">
    <!-- 縮放按鈕 -->
    <button 
      class="lightbox-zoom-in text-white hover:text-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-white/50 rounded-lg p-2 bg-black/30 backdrop-blur-sm"
      aria-label="放大圖片"
      tabindex="0"
    >
      <iconify-icon icon="heroicons:magnifying-glass-plus" class="text-2xl"></iconify-icon>
    </button>
    
    <button 
      class="lightbox-zoom-out text-white hover:text-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-white/50 rounded-lg p-2 bg-black/30 backdrop-blur-sm"
      aria-label="縮小圖片"
      tabindex="0"
    >
      <iconify-icon icon="heroicons:magnifying-glass-minus" class="text-2xl"></iconify-icon>
    </button>
    
    <!-- 全螢幕按鈕 -->
    <button 
      class="lightbox-fullscreen text-white hover:text-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-white/50 rounded-lg p-2 bg-black/30 backdrop-blur-sm"
      aria-label="全螢幕"
      tabindex="0"
    >
      <iconify-icon icon="heroicons:arrows-pointing-out" class="text-2xl"></iconify-icon>
    </button>
    
    <!-- 下載按鈕 -->
    <button 
      class="lightbox-download text-white hover:text-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-white/50 rounded-lg p-2 bg-black/30 backdrop-blur-sm"
      aria-label="下載圖片"
      tabindex="0"
    >
      <iconify-icon icon="heroicons:arrow-down-tray" class="text-2xl"></iconify-icon>
    </button>
    
    <!-- 關閉按鈕 -->
    <button 
      class="lightbox-close text-white hover:text-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-white/50 rounded-lg p-2 bg-black/30 backdrop-blur-sm"
      aria-label="關閉圖片預覽"
      tabindex="0"
    >
      <iconify-icon icon="heroicons:x-mark" class="text-3xl"></iconify-icon>
    </button>
  </div>
  
  <!-- 導航按鈕 -->
  <button 
    class="lightbox-prev absolute left-4 top-1/2 -translate-y-1/2 z-10 text-white hover:text-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-white/50 rounded-lg p-2"
    aria-label="上一張圖片"
    tabindex="0"
  >
    <iconify-icon icon="heroicons:chevron-left" class="text-4xl"></iconify-icon>
  </button>
  
  <button 
    class="lightbox-next absolute right-4 top-1/2 -translate-y-1/2 z-10 text-white hover:text-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-white/50 rounded-lg p-2"
    aria-label="下一張圖片"
    tabindex="0"
  >
    <iconify-icon icon="heroicons:chevron-right" class="text-4xl"></iconify-icon>
  </button>
  
  <!-- 圖片容器 -->
  <div class="lightbox-content relative w-full h-full flex items-center justify-center p-4 overflow-hidden">
    <div class="lightbox-image-container relative transition-transform duration-300" style="transform-origin: center center;">
      <img 
        class="lightbox-image max-w-full max-h-full object-contain cursor-move"
        src="" 
        alt=""
        role="img"
        aria-describedby="lightbox-counter"
        draggable="false"
      />
    </div>
    
    <!-- 載入中指示器 -->
    <div class="lightbox-loading absolute inset-0 flex items-center justify-center">
      <div class="w-12 h-12 border-4 border-white/30 border-t-white rounded-full animate-spin"></div>
    </div>
  </div>
  
  <!-- 圖片計數器 -->
  <div id="lightbox-counter" class="lightbox-counter absolute bottom-4 left-1/2 -translate-x-1/2 text-white text-sm" aria-live="polite" aria-atomic="true">
    第 <span class="current-index">1</span> 張，共 <span class="total-count">1</span> 張圖片
  </div>
</div>

<style>
  .lightbox {
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .lightbox.active {
    opacity: 1;
  }
  
  .lightbox-image {
    opacity: 0;
    transition: opacity 0.3s ease;
    user-select: none;
  }
  
  .lightbox-image.loaded {
    opacity: 1;
  }
  
  .lightbox-image.zoomed {
    cursor: grab;
  }
  
  .lightbox-image.dragging {
    cursor: grabbing;
  }
  
  .lightbox-loading {
    transition: opacity 0.3s ease;
  }
  
  .lightbox-loading.hidden {
    opacity: 0;
    pointer-events: none;
  }
  
  /* 防止背景滾動 */
  :global(body.lightbox-open) {
    overflow: hidden;
  }
</style>

<script>
  class LightboxManager {
    private lightbox: HTMLElement;
    private overlay: HTMLElement;
    private image: HTMLImageElement;
    private imageContainer: HTMLElement;
    private loading: HTMLElement;
    private closeBtn: HTMLElement;
    private prevBtn: HTMLElement;
    private nextBtn: HTMLElement;
    private zoomInBtn: HTMLElement;
    private zoomOutBtn: HTMLElement;
    private fullscreenBtn: HTMLElement;
    private downloadBtn: HTMLElement;
    private currentIndexEl: HTMLElement;
    private totalCountEl: HTMLElement;
    
    private images: any[] = [];
    private currentIndex: number = 0;
    private touchStartX: number = 0;
    private touchEndX: number = 0;
    private zoomLevel: number = 1;
    private isDragging: boolean = false;
    private dragStartX: number = 0;
    private dragStartY: number = 0;
    private translateX: number = 0;
    private translateY: number = 0;
    
    constructor() {
      this.lightbox = document.getElementById('lightbox')!;
      this.overlay = this.lightbox.querySelector('.lightbox-overlay')!;
      this.image = this.lightbox.querySelector('.lightbox-image')!;
      this.imageContainer = this.lightbox.querySelector('.lightbox-image-container')!;
      this.loading = this.lightbox.querySelector('.lightbox-loading')!;
      this.closeBtn = this.lightbox.querySelector('.lightbox-close')!;
      this.prevBtn = this.lightbox.querySelector('.lightbox-prev')!;
      this.nextBtn = this.lightbox.querySelector('.lightbox-next')!;
      this.zoomInBtn = this.lightbox.querySelector('.lightbox-zoom-in')!;
      this.zoomOutBtn = this.lightbox.querySelector('.lightbox-zoom-out')!;
      this.fullscreenBtn = this.lightbox.querySelector('.lightbox-fullscreen')!;
      this.downloadBtn = this.lightbox.querySelector('.lightbox-download')!;
      this.currentIndexEl = this.lightbox.querySelector('.current-index')!;
      this.totalCountEl = this.lightbox.querySelector('.total-count')!;
      
      this.init();
    }
    
    private init() {
      // 綁定事件
      this.closeBtn.addEventListener('click', () => this.close());
      this.overlay.addEventListener('click', () => this.close());
      this.prevBtn.addEventListener('click', () => this.prev());
      this.nextBtn.addEventListener('click', () => this.next());
      this.zoomInBtn.addEventListener('click', () => this.zoomIn());
      this.zoomOutBtn.addEventListener('click', () => this.zoomOut());
      this.fullscreenBtn.addEventListener('click', () => this.toggleFullscreen());
      this.downloadBtn.addEventListener('click', () => this.downloadImage());
      
      // 拖曳事件
      this.image.addEventListener('mousedown', (e) => this.startDrag(e));
      document.addEventListener('mousemove', (e) => this.drag(e));
      document.addEventListener('mouseup', () => this.endDrag());
      
      // 滑鼠滾輪縮放
      this.imageContainer.addEventListener('wheel', (e) => {
        e.preventDefault();
        if (e.deltaY < 0) {
          this.zoomIn();
        } else {
          this.zoomOut();
        }
      }, { passive: false });
      
      // 鍵盤事件
      document.addEventListener('keydown', (e) => {
        if (!this.isOpen()) return;
        
        switch(e.key) {
          case 'Escape':
            this.close();
            break;
          case 'ArrowLeft':
            this.prev();
            break;
          case 'ArrowRight':
            this.next();
            break;
        }
      });
      
      // 觸控事件 - 使用 passive 選項提升性能
      this.lightbox.addEventListener('touchstart', (e) => {
        this.touchStartX = e.touches[0].clientX;
      }, { passive: true });
      
      this.lightbox.addEventListener('touchend', (e) => {
        this.touchEndX = e.changedTouches[0].clientX;
        this.handleSwipe();
      }, { passive: true });
      
      // 暴露全局函數供外部調用
      (window as any).openLightbox = (images: any[], startIndex: number = 0) => {
        if (Array.isArray(images) && images.length > 0) {
          this.images = images;
          this.currentIndex = startIndex;
          this.open();
        }
      };
    }
    
    private handleSwipe() {
      const swipeThreshold = 50;
      const diff = this.touchStartX - this.touchEndX;
      
      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          this.next();
        } else {
          this.prev();
        }
      }
    }
    
    open() {
      this.lightbox.classList.remove('hidden');
      document.body.classList.add('lightbox-open');
      this.resetZoom();
      
      requestAnimationFrame(() => {
        this.lightbox.classList.add('active');
        this.showImage(this.currentIndex);
        // 將焦點設置到關閉按鈕以支援鍵盤導航
        this.closeBtn.focus();
      });
    }
    
    close() {
      this.lightbox.classList.remove('active');
      
      setTimeout(() => {
        this.lightbox.classList.add('hidden');
        document.body.classList.remove('lightbox-open');
      }, 300);
    }
    
    isOpen() {
      return this.lightbox.classList.contains('active');
    }
    
    prev() {
      this.currentIndex = (this.currentIndex - 1 + this.images.length) % this.images.length;
      this.showImage(this.currentIndex);
    }
    
    next() {
      this.currentIndex = (this.currentIndex + 1) % this.images.length;
      this.showImage(this.currentIndex);
    }
    
    private showImage(index: number) {
      const imageData = this.images[index];
      if (!imageData) return;
      
      // 重置縮放和位置
      this.resetZoom();
      
      // 顯示載入中
      this.loading.classList.remove('hidden');
      this.image.classList.remove('loaded');
      
      // 更新計數器
      this.currentIndexEl.textContent = String(index + 1);
      this.totalCountEl.textContent = String(this.images.length);
      
      // 預載圖片
      const tempImg = new Image();
      tempImg.onload = () => {
        this.image.src = imageData.src;
        this.image.alt = imageData.alt;
        this.image.classList.add('loaded');
        this.loading.classList.add('hidden');
        
        // 預載下一張圖片（如果存在）
        if (this.images.length > 1) {
          const nextIndex = (index + 1) % this.images.length;
          const preloadImg = new Image();
          preloadImg.src = this.images[nextIndex].src;
        }
      };
      tempImg.onerror = () => {
        // 圖片載入失敗處理
        this.loading.classList.add('hidden');
        this.image.alt = '圖片載入失敗';
      };
      tempImg.src = imageData.src;
      
      // 更新導航按鈕狀態
      this.prevBtn.style.display = this.images.length > 1 ? 'block' : 'none';
      this.nextBtn.style.display = this.images.length > 1 ? 'block' : 'none';
    }
    
    // 縮放功能
    private zoomIn() {
      if (this.zoomLevel < 3) {
        this.zoomLevel += 0.5;
        this.updateZoom();
      }
    }
    
    private zoomOut() {
      if (this.zoomLevel > 0.5) {
        this.zoomLevel -= 0.5;
        this.updateZoom();
      }
    }
    
    private resetZoom() {
      this.zoomLevel = 1;
      this.translateX = 0;
      this.translateY = 0;
      this.updateZoom();
    }
    
    private updateZoom() {
      this.imageContainer.style.transform = `scale(${this.zoomLevel}) translate(${this.translateX}px, ${this.translateY}px)`;
      
      if (this.zoomLevel > 1) {
        this.image.classList.add('zoomed');
      } else {
        this.image.classList.remove('zoomed');
      }
    }
    
    // 拖曳功能
    private startDrag(e: MouseEvent) {
      if (this.zoomLevel > 1) {
        this.isDragging = true;
        this.dragStartX = e.clientX - this.translateX;
        this.dragStartY = e.clientY - this.translateY;
        this.image.classList.add('dragging');
      }
    }
    
    private drag(e: MouseEvent) {
      if (this.isDragging) {
        this.translateX = e.clientX - this.dragStartX;
        this.translateY = e.clientY - this.dragStartY;
        this.updateZoom();
      }
    }
    
    private endDrag() {
      this.isDragging = false;
      this.image.classList.remove('dragging');
    }
    
    // 全螢幕功能
    private toggleFullscreen() {
      if (!document.fullscreenElement) {
        this.lightbox.requestFullscreen?.();
      } else {
        document.exitFullscreen?.();
      }
    }
    
    // 下載功能
    private downloadImage() {
      const imageData = this.images[this.currentIndex];
      if (!imageData) return;
      
      const link = document.createElement('a');
      link.href = imageData.src;
      link.download = imageData.alt || 'image';
      link.click();
    }
  }
  
  // 初始化燈箱
  document.addEventListener('DOMContentLoaded', () => {
    new LightboxManager();
  });
</script>