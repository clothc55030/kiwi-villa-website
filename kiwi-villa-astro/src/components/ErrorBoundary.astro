---
export interface Props {
  fallback?: string;
  class?: string;
}

const { fallback = '發生錯誤，請稍後再試', class: className = '' } = Astro.props;
---

<div class={`error-boundary ${className}`} data-error-boundary>
  <div class="error-content hidden">
    <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
      <iconify-icon icon="heroicons:exclamation-triangle" class="w-12 h-12 text-red-500 mx-auto mb-4"></iconify-icon>
      <h3 class="text-lg font-semibold text-red-800 mb-2">哎呀！出了點問題</h3>
      <p class="text-red-600 mb-4">{fallback}</p>
      <button 
        class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
        onclick="window.location.reload()"
      >
        重新載入頁面
      </button>
    </div>
  </div>
  <div class="original-content">
    <slot />
  </div>
</div>

<style>
  .error-boundary .hidden {
    display: none;
  }
  
  .error-boundary.has-error .error-content {
    display: block;
  }
  
  .error-boundary.has-error .original-content {
    display: none;
  }
</style>

<script>
  // 錯誤邊界處理
  class ErrorBoundaryHandler {
    private boundaries: Map<Element, { fallback: string }> = new Map();
    
    constructor() {
      this.setupGlobalErrorHandler();
      this.initializeBoundaries();
    }
    
    private setupGlobalErrorHandler() {
      // 捕獲未處理的錯誤
      window.addEventListener('error', (event) => {
        console.error('全局錯誤:', event.error);
        this.handleError(event.target as Element, event.error);
      });
      
      // 捕獲未處理的 Promise 拒絕
      window.addEventListener('unhandledrejection', (event) => {
        console.error('未處理的 Promise 拒絕:', event.reason);
        this.logError({
          type: 'unhandledRejection',
          message: event.reason?.message || '未知錯誤',
          stack: event.reason?.stack,
        });
      });
    }
    
    private initializeBoundaries() {
      const boundaries = document.querySelectorAll('[data-error-boundary]');
      boundaries.forEach(boundary => {
        this.boundaries.set(boundary, {
          fallback: boundary.querySelector('.error-content p')?.textContent || '發生錯誤',
        });
        
        // 監聽邊界內的錯誤
        this.observeBoundary(boundary);
      });
    }
    
    private observeBoundary(boundary: Element) {
      // 使用 MutationObserver 監聽 DOM 變化中的錯誤
      const observer = new MutationObserver(() => {
        // 檢查是否有錯誤發生
        const hasError = boundary.querySelector('.error-occurred');
        if (hasError) {
          boundary.classList.add('has-error');
        }
      });
      
      observer.observe(boundary, {
        childList: true,
        subtree: true,
      });
    }
    
    private handleError(element: Element | null, error: Error) {
      if (!element) return;
      
      // 找到最近的錯誤邊界
      const boundary = element.closest('[data-error-boundary]');
      if (boundary) {
        boundary.classList.add('has-error');
        this.logError({
          type: 'boundary',
          message: error.message,
          stack: error.stack,
          boundary: boundary.className,
        });
      }
    }
    
    private logError(errorInfo: Record<string, any>) {
      // 在生產環境中，這裡可以發送錯誤到監控服務
      if (import.meta.env.PROD) {
        // 發送到錯誤追蹤服務（如 Sentry）
        this.sendToErrorTracking(errorInfo);
      } else {
        console.error('錯誤記錄:', errorInfo);
      }
    }
    
    private sendToErrorTracking(errorInfo: Record<string, any>) {
      // 這裡可以整合 Sentry 或其他錯誤追蹤服務
      // 示例：
      // if (window.Sentry) {
      //   window.Sentry.captureException(new Error(errorInfo.message), {
      //     extra: errorInfo,
      //   });
      // }
      
      // 或發送到自定義的錯誤收集端點
      fetch('/api/errors', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...errorInfo,
          timestamp: new Date().toISOString(),
          userAgent: navigator.userAgent,
          url: window.location.href,
        }),
      }).catch(() => {
        // 靜默失敗，避免錯誤處理本身產生錯誤
      });
    }
  }
  
  // 初始化錯誤邊界處理器
  document.addEventListener('DOMContentLoaded', () => {
    new ErrorBoundaryHandler();
  });
</script>