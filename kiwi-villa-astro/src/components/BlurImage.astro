---
import blurhashes from '../data/blurhashes.json';
import type { BlurImageProps } from './types';

export type Props = BlurImageProps;

const { src, alt, class: className, width, height, loading = 'lazy', fetchpriority } = Astro.props as Props;

// 從 src 中提取相對路徑
const relativeSrc = src.startsWith('/') ? src.slice(1) : src;
const jpgPath = relativeSrc.replace(/\.(webp|avif)$/, '.jpg');
const blurhashData = blurhashes[jpgPath];

// 生成 srcset
const basePath = src.substring(0, src.lastIndexOf('.'));
---

<div 
  class={`blur-image-wrapper ${className || ''}`} 
  data-blur-image
  data-blurhash={blurhashData?.blurhash}
  data-width={blurhashData?.width}
  data-height={blurhashData?.height}
>
  {blurhashData && (
    <canvas 
      class="blur-placeholder"
      width="32"
      height="32"
      style={`aspect-ratio: ${blurhashData.width}/${blurhashData.height};`}
    ></canvas>
  )}
  <picture>
    <source srcset={basePath + '.avif'} type="image/avif" />
    <source srcset={basePath + '.webp'} type="image/webp" />
    <img
      src={src}
      alt={alt}
      width={width}
      height={height}
      loading={loading}
      fetchpriority={fetchpriority}
      class="blur-image"
      data-src={src}
    />
  </picture>
</div>

<style>
  .blur-image-wrapper {
    position: relative;
    overflow: hidden;
  }

  .blur-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    filter: blur(20px);
    transform: scale(1.1);
    transition: opacity 0.3s ease-out;
  }

  .blur-image-wrapper.loaded .blur-placeholder {
    opacity: 0;
  }

  .blur-image {
    position: relative;
    z-index: 1;
    width: 100%;
    height: auto;
    opacity: 0;
    transition: opacity 0.3s ease-out;
  }

  .blur-image-wrapper.loaded .blur-image {
    opacity: 1;
  }
</style>

<script>
  import { decode } from 'blurhash';

  // 渲染 Blurhash 到 canvas
  function renderBlurhash(canvas: HTMLCanvasElement, blurhash: string, width: number, height: number) {
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const pixels = decode(blurhash, 32, 32);
    const imageData = ctx.createImageData(32, 32);
    imageData.data.set(pixels);
    ctx.putImageData(imageData, 0, 0);
  }

  // 使用 Intersection Observer 來處理圖片載入
  const imageObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const wrapper = entry.target as HTMLElement;
        const img = wrapper.querySelector('img') as HTMLImageElement;
        const canvas = wrapper.querySelector('canvas');
        
        // 渲染 Blurhash
        if (canvas && wrapper.dataset.blurhash) {
          renderBlurhash(
            canvas as HTMLCanvasElement, 
            wrapper.dataset.blurhash,
            parseInt(wrapper.dataset.width || '32'),
            parseInt(wrapper.dataset.height || '32')
          );
        }
        
        if (img.complete) {
          wrapper.classList.add('loaded');
        } else {
          img.addEventListener('load', () => {
            wrapper.classList.add('loaded');
          }, { once: true });
        }
        
        imageObserver.unobserve(wrapper);
      }
    });
  }, {
    rootMargin: '50px 0px',
    threshold: 0.01
  });

  // 觀察所有 blur image wrappers
  document.addEventListener('DOMContentLoaded', () => {
    const wrappers = document.querySelectorAll('[data-blur-image]');
    wrappers.forEach(wrapper => {
      imageObserver.observe(wrapper);
    });
  });
</script>